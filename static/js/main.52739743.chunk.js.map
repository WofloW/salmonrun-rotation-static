{"version":3,"sources":["components/scrollable.js","components/card/index.js","App.js","serviceWorker.js","index.js"],"names":["Scrollable","handleScroll","e","target","scrollHeight","scrollTop","clientHeight","props","isBottom","onScroll","this","style","height","overflow","className","children","Component","Card","database","phase","index","reward","_","find","rotations","MonthlyRewardGears","DateTime","StartDateTime","GearKind","hats","shoes","clothes","rewardGear","get","Id","GearID","start","moment","end","EndDateTime","remaining","isBefore","diff","duration","days","hours","minutes","format","marginBottom","width","src","maps","StageID","MapFileName","textAlign","maxWidth","display","map","WeaponSets","weapon","weaponName","weapons","Name","key","float","includes","RareWeaponID","locale","filtered","filter","Phases","isAfter","App","useState","showNumber","setShowNumber","takeRotation","take","window","location","search","fontSize","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52739743.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Scrollable extends Component {\n  handleScroll = (e) => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop <= e.target.clientHeight + 100;\n    if (bottom) {\n      this.props.isBottom()\n    }\n  }\n\n  render() {\n    return (\n      <div onScroll={this.handleScroll} style={{height:'100vh', overflow: 'auto'}} className={this.props.className}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import moment from \"moment\"\nimport _ from \"lodash\"\nimport maps from \"../../maps\"\nimport weapons from \"../../weapons\"\nimport React from \"react\"\nimport rotations from '../../rotations'\nimport hats from '../../gear-hats'\nimport clothes from '../../gear-clothes'\nimport shoes from '../../gear-shoes'\n\nexport default function Card ({phase, index}){\nconst reward = _.find(rotations.MonthlyRewardGears, {DateTime: phase.StartDateTime})\n  const rewardType = reward.GearKind\n  let database\n  switch(rewardType){\n    case 'cHead':\n      database = hats\n      break\n    case 'cShoes':\n      database = shoes\n      break\n    case 'cClothes':\n      database = clothes\n      break\n  }\n\n  const rewardGear = _.get(_.find(database, {Id: reward.GearID}), 'ModelName')\n  const start = moment(phase.StartDateTime + '+00:00')\n  const end = moment(phase.EndDateTime + '+00:00')\n  let remaining = null\n  if (index === 0 && start.isBefore(moment())) {\n    const diff = end.diff(moment())\n    const duration = moment.duration(diff)\n    remaining =\n      <div>{`距离结束：${duration.days() > 0 ? `${duration.days()}天` : ''}${duration.hours() > 0 ? `${duration.hours()}小时` : ''}${duration.minutes()}分钟`}</div>\n  }\n  return <div className='card'>\n    {remaining}\n    <div>\n      开始时间：{start.format('lll')}\n    </div>\n    <div style={{marginBottom: 20}}>\n      结束时间：{end.format('lll')}\n    </div>\n    <div>\n      {/*<div>{phase.StageID}</div>*/}\n      <div><img style={{width: '100%'}}\n                src={`https://woflow.github.io/salmonrun-rotation-static/stages/${_.find(maps, {Id: phase.StageID}).MapFileName}.png`}/>\n      </div>\n    </div>\n    <div style={{textAlign: 'center'}}>\n      <div style={{maxWidth: 625, display: 'inline-block'}}>\n        {\n          _.map(phase.WeaponSets, (weapon, index) => {\n            let weaponName\n            if (_.find(weapons, {Id: weapon})) {\n              weaponName = `Wst_${_.find(weapons, {Id: weapon}).Name}`\n            } else if (weapon === -1) {\n              weaponName = 'questionmark'\n            } else {\n              weaponName = 'questionmark2'\n            }\n            return <div key={index} style={{display: 'inline-block', width: '25%'}}>\n              <img style={{width: '90%'}}\n                   src={`https://woflow.github.io/salmonrun-rotation-static/weapons/${weaponName}.png`}/>\n            </div>\n          })\n        }\n      </div>\n    </div>\n\n    <div>\n      <img style={{width: '25%', float: 'left'}}\n           src={`https://woflow.github.io/salmonrun-rotation-static/gears/${rewardGear}.png`}/>\n      {\n        _.includes(phase.WeaponSets, -1) &&\n        <img\n          style={{width: '25%', float: 'right'}}\n          src={`https://woflow.github.io/salmonrun-rotation-static/weapons/Wst_${_.find(weapons, {Id: phase.RareWeaponID}).Name}.png`}/>\n      }\n    </div>\n\n  </div>\n}\n","import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport 'moment/locale/zh-cn'\n// import axios from 'axios'\nimport rotations from './rotations'\nimport Scrollable from './components/scrollable'\nimport Card from './components/card'\n\nmoment.locale('zh-cn')\n\nconst filtered = _.filter(rotations.Phases, (phase) => {\n  const end = moment(phase.EndDateTime + '+00:00')\n  return end.isAfter(moment())\n})\n\nfunction App() {\n  const [showNumber, setShowNumber] = useState(5)\n  const takeRotation = _.take(filtered, showNumber)\n  if (window.location.search === '?access=138151784') {\n    return (\n      <Scrollable\n        isBottom={() => {\n          setShowNumber(showNumber + 5)\n        }}\n      >\n        <div className=\"App\">\n          <h3>Splatoon 2 Salmon Run rotation</h3>\n          <h3>乌贼2打工时间表</h3>\n          <div style={{fontSize: 12, marginBottom: 10}}>夜风制作 打工qq群: 138151784</div>\n          <div style={{fontSize: 11}}>\n            <div>This website is built for Chinese players only who can't access oatmealdome website.</div>\n            <div>Rotation data from <a href='https://content.oatmealdome.me/bcat/salmon_run'>oatmealdome.me</a></div>\n            <div>Stage and weapon images from <a href='https://leanny.github.io'>leanny.github.io</a></div>\n          </div>\n          {\n            _.map(takeRotation, (phase, index) => {\n              return <Card phase={phase} key={phase.StartDateTime} index={index}/>\n            })\n          }\n        </div>\n      </Scrollable>\n    )\n  } else {\n    return <div><h1>404 Not Found</h1></div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}